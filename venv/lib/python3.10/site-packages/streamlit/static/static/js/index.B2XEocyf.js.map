{"version":3,"file":"index.B2XEocyf.js","sources":["../../../../lib/src/components/widgets/Button/Button.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { Button as ButtonProto } from \"@streamlit/lib/src/proto\"\nimport BaseButton, {\n  BaseButtonKind,\n  BaseButtonSize,\n  BaseButtonTooltip,\n  DynamicButtonLabel,\n} from \"@streamlit/lib/src/components/shared/BaseButton\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nexport interface Props {\n  disabled: boolean\n  element: ButtonProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\nfunction Button(props: Props): ReactElement {\n  const { disabled, element, widgetMgr, width, fragmentId } = props\n  const style = { width }\n\n  let kind = BaseButtonKind.SECONDARY\n  if (element.type === \"primary\") {\n    kind = BaseButtonKind.PRIMARY\n  } else if (element.type === \"tertiary\") {\n    kind = BaseButtonKind.TERTIARY\n  }\n\n  // When useContainerWidth true & has help tooltip,\n  // we need to pass the container width down to the button\n  const fluidWidth = element.help ? width : true\n\n  return (\n    <div className=\"stButton\" data-testid=\"stButton\" style={style}>\n      <BaseButtonTooltip help={element.help}>\n        <BaseButton\n          kind={kind}\n          size={BaseButtonSize.SMALL}\n          disabled={disabled}\n          fluidWidth={element.useContainerWidth ? fluidWidth : false}\n          onClick={() =>\n            widgetMgr.setTriggerValue(element, { fromUi: true }, fragmentId)\n          }\n        >\n          <DynamicButtonLabel icon={element.icon} label={element.label} />\n        </BaseButton>\n      </BaseButtonTooltip>\n    </div>\n  )\n}\n\nexport default Button\n"],"names":["Button","props","disabled","element","widgetMgr","width","fragmentId","style","kind","BaseButtonKind","SECONDARY","type","PRIMARY","TERTIARY","fluidWidth","help","div","className","data-testid","BaseButtonTooltip","BaseButton","size","BaseButtonSize","SMALL","useContainerWidth","onClick","setTriggerValue","fromUi","DynamicButtonLabel","icon","label"],"mappings":"gFAmCA,SAASA,EAAOC,EAAY,CAC1B,KAAM,CAAEC,SAAAA,EAAUC,QAAAA,EAASC,UAAAA,EAAWC,MAAAA,EAAOC,WAAAA,CAAeL,EAAAA,EACtDM,EAAQ,CAAEF,MAAAA,CAAAA,EAEhB,IAAIG,EAAOC,EAAeC,UACtBP,EAAQQ,OAAS,UACnBH,EAAOC,EAAeG,QACbT,EAAQQ,OAAS,aAC1BH,EAAOC,EAAeI,UAKlBC,MAAAA,EAAaX,EAAQY,KAAOV,EAAQ,GAE1C,SACGW,MAAAA,CAAIC,UAAU,WAAWC,cAAY,WAAWX,MAAAA,EAC/C,WAACY,EAAAA,CAAkBJ,KAAMZ,EAAQY,KAC/B,WAACK,EAAAA,CACCZ,KAAAA,EACAa,KAAMC,EAAeC,MACrBrB,SAAAA,EACAY,WAAYX,EAAQqB,kBAAoBV,EAAa,GACrDW,QAAS,IACPrB,EAAUsB,gBAAgBvB,EAAS,CAAEwB,OAAQ,IAAQrB,CAAAA,EAGvD,WAACsB,EAAAA,CAAmBC,KAAM1B,EAAQ0B,KAAMC,MAAO3B,EAAQ2B,KAAAA,QAKjE"}