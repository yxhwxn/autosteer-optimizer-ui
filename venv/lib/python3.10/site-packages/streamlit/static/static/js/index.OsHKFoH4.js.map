{"version":3,"file":"index.OsHKFoH4.js","sources":["../../../../node_modules/@emotion-icons/material-rounded/Send/Send.esm.js","../../../../lib/src/components/widgets/ChatInput/styled-components.ts","../../../../lib/src/components/widgets/ChatInput/ChatInput.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { EmotionIconBase } from '@emotion-icons/emotion-icon';\nexport var Send = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(EmotionIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 24 24\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    width: 24,\n    height: 24,\n    fill: \"none\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3 5.51v3.71c0 .46.31.86.76.97L11 12l-7.24 1.81c-.45.11-.76.51-.76.97v3.71c0 .72.73 1.2 1.39.92l15.42-6.49c.82-.34.82-1.5 0-1.84L4.39 4.58C3.73 4.31 3 4.79 3 5.51z\"\n  }));\n});\nSend.displayName = 'Send';\nexport var SendDimensions = {\n  height: 24,\n  width: 24\n};","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport styled from \"@emotion/styled\"\n\nimport { hasLightBackgroundColor } from \"@streamlit/lib/src/theme\"\n\nexport interface StyledChatInputContainerProps {\n  width: number\n}\n\nexport const StyledChatInputContainer =\n  styled.div<StyledChatInputContainerProps>(({ theme, width }) => {\n    return {\n      borderRadius: theme.radii.default,\n      display: \"flex\",\n      backgroundColor:\n        theme.colors.widgetBackgroundColor ?? theme.colors.secondaryBg,\n      width: `${width}px`,\n    }\n  })\n\nexport const StyledChatInput = styled.div(({ theme }) => {\n  return {\n    backgroundColor: theme.colors.transparent,\n    position: \"relative\",\n    flexGrow: 1,\n    borderRadius: theme.radii.default,\n    display: \"flex\",\n    alignItems: \"center\",\n  }\n})\n\ninterface StyledSendIconButtonProps {\n  disabled: boolean\n  extended: boolean\n}\n\nexport const StyledSendIconButton = styled.button<StyledSendIconButtonProps>(\n  ({ theme, disabled, extended }) => {\n    const lightTheme = hasLightBackgroundColor(theme)\n    const [cleanIconColor, dirtyIconColor] = lightTheme\n      ? [theme.colors.gray60, theme.colors.gray80]\n      : [theme.colors.gray80, theme.colors.gray40]\n    return {\n      border: \"none\",\n      backgroundColor: theme.colors.transparent,\n      borderTopRightRadius: extended ? \"0\" : theme.radii.default,\n      borderTopLeftRadius: extended ? theme.radii.default : \"0\",\n      borderBottomRightRadius: theme.radii.default,\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      lineHeight: theme.lineHeights.none,\n      margin: theme.spacing.none,\n      padding: theme.spacing.sm,\n      color: disabled ? cleanIconColor : dirtyIconColor,\n      pointerEvents: \"auto\",\n      \"&:focus\": {\n        outline: \"none\",\n      },\n      \":focus\": {\n        outline: \"none\",\n      },\n      \"&:focus-visible\": {\n        backgroundColor: lightTheme\n          ? theme.colors.gray10\n          : theme.colors.gray90,\n      },\n      \"&:hover\": {\n        backgroundColor: theme.colors.primary,\n        color: theme.colors.white,\n      },\n      \"&:disabled, &:disabled:hover, &:disabled:active\": {\n        backgroundColor: theme.colors.transparent,\n        borderColor: theme.colors.transparent,\n        color: theme.colors.gray,\n      },\n    }\n  }\n)\n\nexport const StyledSendIconButtonContainer = styled.div({\n  display: \"flex\",\n  alignItems: \"flex-end\",\n  height: \"100%\",\n  position: \"absolute\",\n  right: 0,\n  pointerEvents: \"none\",\n})\n\nexport const StyledInputInstructionsContainer = styled.div(({ theme }) => ({\n  position: \"absolute\",\n  bottom: \"0px\",\n  // Calculate the right padding to account for the send icon (iconSizes.xl + 2 * spacing.sm)\n  // and some additional margin between the icon and the text (spacing.sm).\n  right: `calc(${theme.iconSizes.xl} + 2 * ${theme.spacing.sm} + ${theme.spacing.sm})`,\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\nimport { Send } from \"@emotion-icons/material-rounded\"\nimport { Textarea as UITextArea } from \"baseui/textarea\"\n\nimport { ChatInput as ChatInputProto } from \"@streamlit/lib/src/proto\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport InputInstructions from \"@streamlit/lib/src/components/shared/InputInstructions/InputInstructions\"\nimport { isEnterKeyPressed } from \"@streamlit/lib/src/util/inputUtils\"\n\nimport {\n  StyledChatInput,\n  StyledChatInputContainer,\n  StyledInputInstructionsContainer,\n  StyledSendIconButton,\n  StyledSendIconButtonContainer,\n} from \"./styled-components\"\n\nexport interface Props {\n  disabled: boolean\n  element: ChatInputProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\n// We want to show easily that there's scrolling so we deliberately choose\n// a half size.\nconst MAX_VISIBLE_NUM_LINES = 6.5\n// Rounding errors can arbitrarily create scrollbars. We add a rounding offset\n// to manage it better.\nconst ROUNDING_OFFSET = 1\n\nfunction ChatInput({\n  width,\n  element,\n  widgetMgr,\n  fragmentId,\n}: Props): React.ReactElement {\n  const theme = useTheme()\n  // True if the user-specified state.value has not yet been synced to the WidgetStateManager.\n  const [dirty, setDirty] = useState(false)\n  // The value specified by the user via the UI. If the user didn't touch this widget's UI, the default value is used.\n  const [value, setValue] = useState(element.default)\n  // The value of the height of the textarea. It depends on a variety of factors including the default height, and autogrowing\n  const [scrollHeight, setScrollHeight] = useState(0)\n  const chatInputRef = useRef<HTMLTextAreaElement>(null)\n  const heightGuidance = useRef({ minHeight: 0, maxHeight: 0 })\n\n  const getScrollHeight = (): number => {\n    let scrollHeight = 0\n    const { current: textarea } = chatInputRef\n    if (textarea) {\n      const placeholder = textarea.placeholder\n      textarea.placeholder = \"\"\n      textarea.style.height = \"auto\"\n      scrollHeight = textarea.scrollHeight\n      textarea.placeholder = placeholder\n      textarea.style.height = \"\"\n    }\n\n    return scrollHeight\n  }\n\n  const handleSubmit = (): void => {\n    // We want the chat input to always be in focus\n    // even if the user clicks the submit button\n    if (chatInputRef.current) {\n      chatInputRef.current.focus()\n    }\n\n    if (!value) {\n      return\n    }\n\n    widgetMgr.setStringTriggerValue(\n      element,\n      value,\n      { fromUi: true },\n      fragmentId\n    )\n    setDirty(false)\n    setValue(\"\")\n    setScrollHeight(0)\n  }\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>): void => {\n    const { metaKey, ctrlKey, shiftKey } = e\n    const shouldSubmit =\n      isEnterKeyPressed(e) && !shiftKey && !ctrlKey && !metaKey\n\n    if (shouldSubmit) {\n      e.preventDefault()\n\n      handleSubmit()\n    }\n  }\n\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>): void => {\n    const { value } = e.target\n    const { maxChars } = element\n\n    if (maxChars !== 0 && value.length > maxChars) {\n      return\n    }\n\n    setDirty(value !== \"\")\n    setValue(value)\n    setScrollHeight(getScrollHeight())\n  }\n\n  useEffect(() => {\n    if (element.setValue) {\n      // We are intentionally setting this to avoid regularly calling this effect.\n      // TODO: Update to match React best practices\n      // eslint-disable-next-line react-compiler/react-compiler\n      element.setValue = false\n      const val = element.value || \"\"\n      setValue(val)\n      setDirty(val !== \"\")\n    }\n  }, [element])\n\n  useEffect(() => {\n    if (chatInputRef.current) {\n      const { offsetHeight } = chatInputRef.current\n      heightGuidance.current.minHeight = offsetHeight\n      heightGuidance.current.maxHeight = offsetHeight * MAX_VISIBLE_NUM_LINES\n    }\n  }, [chatInputRef])\n\n  const { disabled, placeholder, maxChars } = element\n  const { minHeight, maxHeight } = heightGuidance.current\n\n  const isInputExtended =\n    scrollHeight > 0 && chatInputRef.current\n      ? Math.abs(scrollHeight - minHeight) > ROUNDING_OFFSET\n      : false\n\n  return (\n    <StyledChatInputContainer\n      className=\"stChatInput\"\n      data-testid=\"stChatInput\"\n      width={width}\n    >\n      <StyledChatInput>\n        <UITextArea\n          inputRef={chatInputRef}\n          value={value}\n          placeholder={placeholder}\n          onChange={handleChange}\n          onKeyDown={handleKeyDown}\n          aria-label={placeholder}\n          disabled={disabled}\n          rows={1}\n          overrides={{\n            Root: {\n              style: {\n                minHeight: theme.sizes.minElementHeight,\n                outline: \"none\",\n                backgroundColor: theme.colors.transparent,\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                borderLeftWidth: theme.sizes.borderWidth,\n                borderRightWidth: theme.sizes.borderWidth,\n                borderTopWidth: theme.sizes.borderWidth,\n                borderBottomWidth: theme.sizes.borderWidth,\n                width: `${width}px`,\n              },\n            },\n            InputContainer: {\n              style: {\n                backgroundColor: theme.colors.transparent,\n              },\n            },\n            Input: {\n              props: {\n                \"data-testid\": \"stChatInputTextArea\",\n              },\n              style: {\n                lineHeight: theme.lineHeights.inputWidget,\n                backgroundColor: theme.colors.transparent,\n                // Disable resizing via drag and drop\n                resize: \"none\",\n                \"::placeholder\": {\n                  opacity: \"0.7\",\n                },\n                height: isInputExtended\n                  ? `${scrollHeight + ROUNDING_OFFSET}px`\n                  : \"auto\",\n                maxHeight: maxHeight ? `${maxHeight}px` : \"none\",\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                paddingLeft: theme.spacing.sm,\n                paddingBottom: theme.spacing.sm,\n                paddingTop: theme.spacing.sm,\n                // Calculate the right padding to account for the send icon (iconSizes.xl + 2 * spacing.sm)\n                // and some additional margin between the icon and the text (spacing.sm).\n                paddingRight: `calc(${theme.iconSizes.xl} + 2 * ${theme.spacing.sm} + ${theme.spacing.sm})`,\n              },\n            },\n          }}\n        />\n        {/* Hide the character limit in small widget sizes */}\n        {width > theme.breakpoints.hideWidgetDetails && (\n          <StyledInputInstructionsContainer>\n            <InputInstructions\n              dirty={dirty}\n              value={value}\n              maxLength={maxChars}\n              type=\"chat\"\n              // Chat Input are not able to be used in forms\n              inForm={false}\n            />\n          </StyledInputInstructionsContainer>\n        )}\n        <StyledSendIconButtonContainer>\n          <StyledSendIconButton\n            onClick={handleSubmit}\n            disabled={!dirty || disabled}\n            extended={isInputExtended}\n            data-testid=\"stChatInputSubmitButton\"\n          >\n            <Icon content={Send} size=\"xl\" color=\"inherit\" />\n          </StyledSendIconButton>\n        </StyledSendIconButtonContainer>\n      </StyledChatInput>\n    </StyledChatInputContainer>\n  )\n}\n\nexport default ChatInput\n"],"names":["Send","React.forwardRef","props","ref","attrs","React.createElement","EmotionIconBase","_extends","StyledChatInputContainer","styled","theme","width","borderRadius","radii","default","display","backgroundColor","colors","widgetBackgroundColor","secondaryBg","StyledChatInput","transparent","position","flexGrow","alignItems","StyledSendIconButton","disabled","extended","lightTheme","hasLightBackgroundColor","cleanIconColor","dirtyIconColor","gray60","gray80","gray40","border","borderTopRightRadius","borderTopLeftRadius","borderBottomRightRadius","justifyContent","lineHeight","lineHeights","none","margin","spacing","padding","sm","color","pointerEvents","outline","gray10","gray90","primary","white","borderColor","gray","StyledSendIconButtonContainer","height","right","StyledInputInstructionsContainer","bottom","iconSizes","xl","MAX_VISIBLE_NUM_LINES","ROUNDING_OFFSET","ChatInput","element","widgetMgr","fragmentId","useTheme","dirty","setDirty","useState","value","setValue","scrollHeight","setScrollHeight","chatInputRef","useRef","heightGuidance","minHeight","maxHeight","getScrollHeight","current","textarea","placeholder","style","handleSubmit","focus","setStringTriggerValue","fromUi","handleKeyDown","e","metaKey","ctrlKey","shiftKey","isEnterKeyPressed","preventDefault","handleChange","target","maxChars","length","useEffect","val","offsetHeight","isInputExtended","Math","abs","className","data-testid","UITextArea","inputRef","onChange","onKeyDown","aria-label","rows","overrides","Root","sizes","minElementHeight","borderLeftWidth","borderWidth","borderRightWidth","borderTopWidth","borderBottomWidth","InputContainer","Input","inputWidget","resize","opacity","paddingLeft","paddingBottom","paddingTop","paddingRight","breakpoints","hideWidgetDetails","InputInstructions","maxLength","type","inForm","onClick","Icon","content","size"],"mappings":"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","x_google_ignoreList":[0]}