{"version":3,"file":"useOnInputChange.CnjxQnML.js","sources":["../../../../lib/src/hooks/useUpdateUiValue.ts","../../../../lib/src/hooks/useSubmitFormViaEnterKey.ts","../../../../lib/src/hooks/useOnInputChange.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Dispatch, SetStateAction, useEffect } from \"react\"\n\n/**\n * Sets the ui value to the new value if they are not equal and the ui value is not dirty.\n * If the ui value is dirty, it means the user has made changes to the ui value that have not been synced to the backend.\n *\n * @param newValue the new value to set the ui value to\n * @param uiValue the current ui value\n * @param setUiValue the function to set the ui value\n * @param dirty whether the ui value is dirty (has unsynced changes)\n */\nexport default function useUpdateUiValue<T>(\n  newValue: T,\n  uiValue: T,\n  setUiValue: Dispatch<SetStateAction<T>>,\n  dirty: boolean\n): void {\n  useEffect(() => {\n    // the UI did not sync its value\n    if (dirty) {\n      return\n    }\n    // If the incoming value changes, update the UI value (e.g. set via state)\n    if (newValue !== uiValue) {\n      setUiValue(newValue)\n    }\n  }, [newValue, uiValue, dirty, setUiValue])\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback } from \"react\"\n\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { isEnterKeyPressed } from \"@streamlit/lib/src/util/inputUtils\"\n\nexport type SubmitFormKeyboardEvent = Pick<\n  React.KeyboardEvent<HTMLElement>,\n  \"metaKey\" | \"ctrlKey\" | \"keyCode\" | \"key\" | \"nativeEvent\" | \"preventDefault\"\n>\n\n/**\n * Will return a memoized function that will call commitWidgetValue and submit the form\n * if the Enter key (+ optionally the command key) is pressed.\n *\n * @param formId of the form to submit\n * @param commitWidgetValue callback to call\n * @param callCommitWidgetValue whether to call commitWidgetValue\n * @param widgetMgr used to handle form submission\n * @param fragmentId\n * @param requireCommandKey if true, the metaKey or ctrlKey must be pressed to trigger the callback\n * @returns memoized callback\n */\nexport default function useSubmitFormViaEnterKey(\n  formId: string,\n  commitWidgetValue: () => void,\n  callCommitWidgetValue: boolean,\n  widgetMgr: WidgetStateManager,\n  fragmentId?: string,\n  requireCommandKey = false\n): (e: SubmitFormKeyboardEvent) => void {\n  return useCallback(\n    (e: SubmitFormKeyboardEvent): void => {\n      const isCommandKeyPressed = requireCommandKey\n        ? e.metaKey || e.ctrlKey\n        : true\n\n      if (!isEnterKeyPressed(e) || !isCommandKeyPressed) {\n        return\n      }\n\n      e.preventDefault()\n      if (callCommitWidgetValue) {\n        commitWidgetValue()\n      }\n\n      if (widgetMgr.allowFormEnterToSubmit(formId)) {\n        widgetMgr.submitForm(formId, fragmentId)\n      }\n    },\n    [\n      formId,\n      fragmentId,\n      callCommitWidgetValue,\n      commitWidgetValue,\n      widgetMgr,\n      requireCommandKey,\n    ]\n  )\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Dispatch, SetStateAction, useCallback } from \"react\"\n\nimport { isInForm } from \"@streamlit/lib/src/util/utils\"\nimport { ValueWithSource } from \"@streamlit/lib/src/hooks/useBasicWidgetState\"\n\ntype OnInputChangeEventType = {\n  target: {\n    value: HTMLInputElement[\"value\"]\n  }\n}\n\ninterface OnInputChangeProps {\n  formId: string | undefined\n  maxChars: number\n  setDirty: (dirty: boolean) => void\n  setUiValue: (value: string) => void\n  setValueWithSource: Dispatch<\n    SetStateAction<ValueWithSource<string | null> | null>\n  >\n}\n\n/**\n * Will return a memoized function that accepts an HTMLInputElement and will call\n * commitWidgetValue and setDirty with its value, unless the value is longer than\n * maxChars. Will also call the setValueWithSource callback if the input is in a form.\n *\n * @param formId if is in a form\n * @param maxChars if the input element's value length is greater than this, nothing will be called. Set to 0 to disable.\n * @param setDirty calls setDirty with true\n * @param setUiValue calls setUiValue with the input element's value\n * @param setValueWithSource calls setValueWithSource with the input element's value\n * @return memoized callback\n */\nexport default function useOnInputChange({\n  formId,\n  maxChars,\n  setDirty,\n  setUiValue,\n  setValueWithSource,\n}: OnInputChangeProps): (e: OnInputChangeEventType) => void {\n  return useCallback(\n    (e: OnInputChangeEventType): void => {\n      const { value: newValue } = e.target\n\n      if (maxChars !== 0 && newValue.length > maxChars) {\n        return\n      }\n\n      setDirty(true)\n      setUiValue(newValue)\n\n      // We immediately update its widgetValue on text changes in forms\n      // see here for why: https://github.com/streamlit/streamlit/issues/7101\n      // The widgetValue won't be passed to the Python script until the form\n      // is submitted, so this won't cause the script to re-run.\n      if (isInForm({ formId })) {\n        // Make sure dirty is true so that enter to submit form text shows\n        setValueWithSource({ value: newValue, fromUi: true })\n      }\n      // If the TextInput is *not* part of a form, we mark it dirty but don't\n      // update its value in the WidgetMgr. This means that individual keypresses\n      // won't trigger a script re-run.\n    },\n    [formId, maxChars, setDirty, setUiValue, setValueWithSource]\n  )\n}\n"],"names":["useUpdateUiValue","newValue","uiValue","setUiValue","dirty","useEffect","useSubmitFormViaEnterKey","formId","commitWidgetValue","callCommitWidgetValue","widgetMgr","fragmentId","requireCommandKey","useCallback","e","isCommandKeyPressed","metaKey","ctrlKey","isEnterKeyPressed","preventDefault","allowFormEnterToSubmit","submitForm","useOnInputChange","maxChars","setDirty","setValueWithSource","value","target","length","isInForm","fromUi"],"mappings":"6FA2BA,SAAwBA,EACtBC,EACAC,EACAC,EACAC,EAAc,CAEdC,EAAAA,UAAU,IAAA,CAEJD,GAIAH,IAAaC,GACfC,EAAWF,CAAAA,CACb,EACC,CAACA,EAAUC,EAASE,EAAOD,CAAAA,CAAW,CAC3C,CCLA,SAAwBG,EACtBC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAoB,GAAK,CAElBC,OAAAA,EAAAA,YACJC,GAAAA,CACC,MAAMC,EAAsBH,EACxBE,EAAEE,SAAWF,EAAEG,QACf,GAEA,CAACC,EAAkBJ,CAAM,GAAA,CAACC,IAI9BD,EAAEK,eAAc,EACZV,GACFD,IAGEE,EAAUU,uBAAuBb,CAAS,GAClCc,EAAAA,WAAWd,EAAQI,CAAAA,EAC/B,EAEF,CACEJ,EACAI,EACAF,EACAD,EACAE,EACAE,CAAAA,CACD,CAEL,CCzBA,SAAwBU,EAAiB,CACvCf,OAAAA,EACAgB,SAAAA,EACAC,SAAAA,EACArB,WAAAA,EACAsB,mBAAAA,GACmB,CACZZ,OAAAA,EAAAA,YACJC,GAAAA,CACC,KAAM,CAAEY,MAAOzB,GAAaa,EAAEa,OAE1BJ,IAAa,GAAKtB,EAAS2B,OAASL,IAIxCC,EAAS,EAAA,EACTrB,EAAWF,CAAAA,EAMP4B,EAAS,CAAEtB,OAAAA,CAAAA,CAAW,GAELkB,EAAA,CAAEC,MAAOzB,EAAU6B,OAAQ,EAAA,CAAK,EACrD,EAKF,CAACvB,EAAQgB,EAAUC,EAAUrB,EAAYsB,CAAAA,CAAmB,CAEhE"}