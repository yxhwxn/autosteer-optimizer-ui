{"version":3,"file":"index.DP3-2mdY.js","sources":["../../../../lib/src/components/widgets/TextArea/TextArea.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { FC, memo, useCallback, useRef, useState } from \"react\"\n\nimport { Textarea as UITextArea } from \"baseui/textarea\"\nimport { useTheme } from \"@emotion/react\"\nimport uniqueId from \"lodash/uniqueId\"\n\nimport { TextArea as TextAreaProto } from \"@streamlit/lib/src/proto\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport useUpdateUiValue from \"@streamlit/lib/src/hooks/useUpdateUiValue\"\nimport useSubmitFormViaEnterKey from \"@streamlit/lib/src/hooks/useSubmitFormViaEnterKey\"\nimport useOnInputChange from \"@streamlit/lib/src/hooks/useOnInputChange\"\nimport InputInstructions from \"@streamlit/lib/src/components/shared/InputInstructions/InputInstructions\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport {\n  isInForm,\n  labelVisibilityProtoValueToEnum,\n} from \"@streamlit/lib/src/util/utils\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport {\n  useBasicWidgetState,\n  ValueWithSource,\n} from \"@streamlit/lib/src/hooks/useBasicWidgetState\"\n\nexport interface Props {\n  disabled: boolean\n  element: TextAreaProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\ntype TextAreaValue = string | null\n\nconst getStateFromWidgetMgr = (\n  widgetMgr: WidgetStateManager,\n  element: TextAreaProto\n): TextAreaValue | undefined => {\n  return widgetMgr.getStringValue(element) ?? element.default ?? null\n}\n\nconst getDefaultStateFromProto = (element: TextAreaProto): TextAreaValue => {\n  return element.default ?? null\n}\n\nconst getCurrStateFromProto = (element: TextAreaProto): TextAreaValue => {\n  return element.value ?? null\n}\n\nconst updateWidgetMgrState = (\n  element: TextAreaProto,\n  widgetMgr: WidgetStateManager,\n  valueWithSource: ValueWithSource<TextAreaValue>,\n  fragmentId?: string\n): void => {\n  widgetMgr.setStringValue(\n    element,\n    valueWithSource.value,\n    { fromUi: valueWithSource.fromUi },\n    fragmentId\n  )\n}\n\nconst TextArea: FC<Props> = ({\n  disabled,\n  element,\n  widgetMgr,\n  fragmentId,\n  width,\n}) => {\n  // TODO: Update to match React best practices\n  // eslint-disable-next-line react-compiler/react-compiler\n  const id = useRef(uniqueId(\"text_area_\")).current\n\n  /**\n   * True if the user-specified state.value has not yet been synced to the WidgetStateManager.\n   */\n  const [dirty, setDirty] = useState(false)\n  /**\n   * Whether the area is currently focused.\n   */\n  const [focused, setFocused] = useState(false)\n\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  const [uiValue, setUiValue] = useState<string | null>(\n    getStateFromWidgetMgr(widgetMgr, element) ?? null\n  )\n\n  const onFormCleared = useCallback(() => {\n    setUiValue(element.default ?? null)\n    setDirty(true)\n  }, [element])\n\n  const [value, setValueWithSource] = useBasicWidgetState<\n    TextAreaValue,\n    TextAreaProto\n  >({\n    getStateFromWidgetMgr,\n    getDefaultStateFromProto,\n    getCurrStateFromProto,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n    onFormCleared,\n  })\n\n  useUpdateUiValue(value, uiValue, setUiValue, dirty)\n\n  const theme: EmotionTheme = useTheme()\n\n  const commitWidgetValue = useCallback((): void => {\n    setDirty(false)\n    setValueWithSource({ value: uiValue, fromUi: true })\n  }, [uiValue, setValueWithSource])\n\n  const onBlur = useCallback(() => {\n    if (dirty) {\n      commitWidgetValue()\n    }\n    setFocused(false)\n  }, [dirty, commitWidgetValue])\n\n  const onFocus = useCallback(() => {\n    setFocused(true)\n  }, [])\n\n  const onChange = useOnInputChange({\n    formId: element.formId,\n    maxChars: element.maxChars,\n    setDirty,\n    setUiValue,\n    setValueWithSource,\n  })\n\n  const onKeyDown = useSubmitFormViaEnterKey(\n    element.formId,\n    commitWidgetValue,\n    dirty,\n    widgetMgr,\n    fragmentId,\n    true\n  )\n\n  const style = { width }\n  const { height, placeholder, formId } = element\n\n  // Show \"Please enter\" instructions if in a form & allowed, or not in form and state is dirty.\n  const allowEnterToSubmit = isInForm({ formId })\n    ? widgetMgr.allowFormEnterToSubmit(formId)\n    : dirty\n\n  // Hide input instructions for small widget sizes.\n  const shouldShowInstructions =\n    focused && width > theme.breakpoints.hideWidgetDetails\n\n  return (\n    <div className=\"stTextArea\" data-testid=\"stTextArea\" style={style}>\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n        htmlFor={id}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n      <UITextArea\n        value={uiValue ?? \"\"}\n        placeholder={placeholder}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        aria-label={element.label}\n        disabled={disabled}\n        id={id}\n        overrides={{\n          Input: {\n            style: {\n              lineHeight: theme.lineHeights.inputWidget,\n\n              // The default height of the text area is calculated to perfectly fit 3 lines of text.\n              height: height ? `${height}px` : \"\",\n              minHeight: theme.sizes.largestElementHeight,\n              resize: \"vertical\",\n              \"::placeholder\": {\n                opacity: \"0.7\",\n              },\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              paddingRight: theme.spacing.lg,\n              paddingLeft: theme.spacing.lg,\n              paddingBottom: theme.spacing.lg,\n              paddingTop: theme.spacing.lg,\n            },\n          },\n          Root: {\n            props: {\n              \"data-testid\": \"stTextAreaRootElement\",\n            },\n            style: {\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              borderLeftWidth: theme.sizes.borderWidth,\n              borderRightWidth: theme.sizes.borderWidth,\n              borderTopWidth: theme.sizes.borderWidth,\n              borderBottomWidth: theme.sizes.borderWidth,\n            },\n          },\n        }}\n      />\n      {shouldShowInstructions && (\n        <InputInstructions\n          dirty={dirty}\n          value={uiValue ?? \"\"}\n          maxLength={element.maxChars}\n          type={\"multiline\"}\n          inForm={isInForm({ formId })}\n          allowEnterToSubmit={allowEnterToSubmit}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default memo(TextArea)\n"],"names":["getStateFromWidgetMgr","widgetMgr","element","getStringValue","default","getDefaultStateFromProto","getCurrStateFromProto","value","updateWidgetMgrState","valueWithSource","fragmentId","setStringValue","fromUi","TextArea","disabled","width","id","useRef","uniqueId","current","dirty","setDirty","useState","focused","setFocused","uiValue","setUiValue","onFormCleared","useCallback","setValueWithSource","useBasicWidgetState","theme","useTheme","commitWidgetValue","onBlur","onFocus","onChange","useOnInputChange","formId","maxChars","onKeyDown","useSubmitFormViaEnterKey","style","height","placeholder","allowEnterToSubmit","isInForm","allowFormEnterToSubmit","shouldShowInstructions","breakpoints","hideWidgetDetails","div","className","data-testid","WidgetLabel","label","labelVisibility","labelVisibilityProtoValueToEnum","htmlFor","help","_jsx","StyledWidgetLabelHelp","TooltipIcon","content","placement","Placement","TOP_RIGHT","UITextArea","aria-label","overrides","Input","lineHeight","lineHeights","inputWidget","minHeight","sizes","largestElementHeight","resize","opacity","paddingRight","spacing","lg","paddingLeft","paddingBottom","paddingTop","Root","props","borderLeftWidth","borderWidth","borderRightWidth","borderTopWidth","borderBottomWidth","InputInstructions","maxLength","type","inForm","TextArea$1"],"mappings":"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"}