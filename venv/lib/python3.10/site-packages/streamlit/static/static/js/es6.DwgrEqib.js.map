{"version":3,"mappings":"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","names":["native","showDirectoryPicker","options","input","p","__vitePreload","util","resolve","mod","def","showOpenFilePicker","opts","e","m","showSaveFilePicker","FileSystemFileHandle","FileSystemFileHandle$1","FileHandle","entry","FolderHandle","FileSystemDirectoryHandle","getOriginPrivateDirectory","driver","_b","_a","FileSystemDirectoryHandle$2","module","sandbox","config","WritableStream","_FileSystemWritableFileStream","writer","__privateAdd","_writer","__privateSet","w","position","size","data","result","FileSystemWritableFileStream","kAdapter","FileSystemHandle","adapter","__publicField","descriptor","mode","handle","other","errors","fromDataTransfer","entries","memory","fs","folder","getDirHandlesFromInput","files","rootName","root","file","path","name","dir","getFileHandlesFromInput","GONE","MOD_ERR","_","possibleDescendant","openSet","current","proto","ensureDoActuallyStillExist","removeEntry","err","INVALID","SYNTAX","wm","workerUrl","code","fileHandle","evt","port","cmd","stringCode","blob","worker","textEncoder","send","message","reject","mc","parent","ctrl","chunk","ab","reason","orig","args"],"ignoreList":[0,1,2,3,4,5,6,7,8,9],"sources":["../../../../node_modules/native-file-system-adapter/src/showDirectoryPicker.js","../../../../node_modules/native-file-system-adapter/src/showOpenFilePicker.js","../../../../node_modules/native-file-system-adapter/src/showSaveFilePicker.js","../../../../node_modules/native-file-system-adapter/src/getOriginPrivateDirectory.js","../../../../node_modules/native-file-system-adapter/src/config.js","../../../../node_modules/native-file-system-adapter/src/FileSystemWritableFileStream.js","../../../../node_modules/native-file-system-adapter/src/FileSystemHandle.js","../../../../node_modules/native-file-system-adapter/src/util.js","../../../../node_modules/native-file-system-adapter/src/FileSystemDirectoryHandle.js","../../../../node_modules/native-file-system-adapter/src/FileSystemFileHandle.js"],"sourcesContent":["/** @typedef {import('./FileSystemDirectoryHandle.js').default} FileSystemDirectoryHandle */\n\nconst native = globalThis.showDirectoryPicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemDirectoryHandle>}\n */\nasync function showDirectoryPicker (options = {}) {\n  if (native && !options._preferPolyfill) {\n    return native(options)\n  }\n\n  const input = document.createElement('input')\n  input.type = 'file'\n  input.webkitdirectory = true\n  // Fallback to multiple files input for iOS Safari\n  input.multiple = true\n\n  // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n  input.style.position = 'fixed'\n  input.style.top = '-100000px'\n  input.style.left = '-100000px'\n  document.body.appendChild(input)\n\n  // Lazy load while the user is choosing the directory\n  const p = import('./util.js')\n\n  await new Promise(resolve => {\n    input.addEventListener('change', resolve)\n    input.click()\n  })\n\n  return p.then(mod => mod.getDirHandlesFromInput(input))\n}\n\nexport default showDirectoryPicker\nexport { showDirectoryPicker }\n","/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst def = { accepts: [] }\nconst native = globalThis.showOpenFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.multiple] If you want to allow more than one file\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.accepts] Files you want to accept\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemFileHandle[]>}\n */\nasync function showOpenFilePicker (options = {}) {\n  const opts = { ...def, ...options }\n\n  if (native && !options._preferPolyfill) {\n    return native(opts)\n  }\n\n  const input = document.createElement('input')\n  input.type = 'file'\n  input.multiple = opts.multiple\n  input.accept = (opts.accepts || [])\n    .map(e => [\n      ...(e.extensions || []).map(e => '.' + e),\n      ...e.mimeTypes || []]\n    )\n    .flat()\n    .join(',')\n\n  // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n  Object.assign(input.style, {\n    position: 'fixed',\n    top: '-100000px',\n    left: '-100000px'\n  })\n\n  document.body.appendChild(input)\n\n  // Lazy load while the user is choosing the directory\n  const p = import('./util.js')\n\n  await new Promise(resolve => {\n    input.addEventListener('change', resolve, { once: true })\n    input.click()\n  })\n  input.remove()\n\n  return p.then(m => m.getFileHandlesFromInput(input))\n}\n\nexport default showOpenFilePicker\nexport { showOpenFilePicker }\n","/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst native = globalThis.showSaveFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.types] Files you want to accept\n * @param {string} [options.suggestedName] the name to fall back to when using polyfill\n * @param {string} [options._name] the name to fall back to when using polyfill\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @return {Promise<FileSystemFileHandle>}\n */\nasync function showSaveFilePicker (options = {}) {\n  if (native && !options._preferPolyfill) {\n    return native(options)\n  }\n\n  if (options._name) {\n    console.warn('deprecated _name, spec now have `suggestedName`')\n    options.suggestedName = options._name\n  }\n\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n  const { FileHandle } = await import('./adapters/downloader.js')\n  return new FileSystemFileHandle(new FileHandle(options.suggestedName))\n}\n\nexport default showSaveFilePicker\nexport { showSaveFilePicker }\n","/** @typedef {import('./FileSystemDirectoryHandle.js').default} FileSystemDirectoryHandle */\n\nif (globalThis.DataTransferItem && !DataTransferItem.prototype.getAsFileSystemHandle) {\n  DataTransferItem.prototype.getAsFileSystemHandle = async function () {\n    const entry = this.webkitGetAsEntry()\n    const [\n      { FileHandle, FolderHandle },\n      { FileSystemDirectoryHandle },\n      { FileSystemFileHandle }\n    ] = await Promise.all([\n      import('./adapters/sandbox.js'),\n      import('./FileSystemDirectoryHandle.js'),\n      import('./FileSystemFileHandle.js')\n    ])\n\n    return entry.isFile\n      ? new FileSystemFileHandle(new FileHandle(entry, false))\n      : new FileSystemDirectoryHandle(new FolderHandle(entry, false))\n  }\n}\n\n/**\n * @param {object=} driver\n * @return {Promise<FileSystemDirectoryHandle>}\n */\nasync function getOriginPrivateDirectory (driver, options = {}) {\n  if (!driver) {\n    return globalThis.navigator?.storage?.getDirectory() || globalThis.getOriginPrivateDirectory()\n  }\n  const {FileSystemDirectoryHandle} = await import('./FileSystemDirectoryHandle.js')\n  const module = await driver\n  const sandbox = await (module.default\n    ? module.default(options)\n    : module(options)\n  )\n  return new FileSystemDirectoryHandle(sandbox)\n}\n\nexport default getOriginPrivateDirectory\n","const config = {\n  ReadableStream: globalThis.ReadableStream,\n  WritableStream: globalThis.WritableStream,\n  TransformStream: globalThis.TransformStream,\n  DOMException: globalThis.DOMException,\n  Blob: globalThis.Blob,\n  File: globalThis.File,\n}\n\nexport default config\n","import config from './config.js'\n\nconst { WritableStream } = config\n\nclass FileSystemWritableFileStream extends WritableStream {\n  #writer\n  constructor (writer) {\n    super(writer)\n    this.#writer = writer\n    // Stupid Safari hack to extend native classes\n    // https://bugs.webkit.org/show_bug.cgi?id=226201\n    Object.setPrototypeOf(this, FileSystemWritableFileStream.prototype)\n\n    /** @private */\n    this._closed = false\n  }\n\n  async close () {\n    this._closed = true\n    const w = this.getWriter()\n    const p = w.close()\n    w.releaseLock()\n    return p\n    // return super.close ? super.close() : this.getWriter().close()\n  }\n\n  /** @param {number} position */\n  seek (position) {\n    return this.write({ type: 'seek', position })\n  }\n\n  /** @param {number} size */\n  truncate (size) {\n    return this.write({ type: 'truncate', size })\n  }\n\n  // The write(data) method steps are:\n  write (data) {\n    if (this._closed) {\n      return Promise.reject(new TypeError('Cannot write to a CLOSED writable stream'))\n    }\n\n    // 1. Let writer be the result of getting a writer for this.\n    const writer = this.getWriter()\n\n    // 2. Let result be the result of writing a chunk to writer given data.\n    const result = writer.write(data)\n\n    // 3. Release writer.\n    writer.releaseLock()\n\n    // 4. Return result.\n    return result\n  }\n}\n\nObject.defineProperty(FileSystemWritableFileStream.prototype, Symbol.toStringTag, {\n  value: 'FileSystemWritableFileStream',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nObject.defineProperties(FileSystemWritableFileStream.prototype, {\n  close: { enumerable: true },\n  seek: { enumerable: true },\n  truncate: { enumerable: true },\n  write: { enumerable: true }\n})\n\n// Safari safari doesn't support writable streams yet.\nif (\n  globalThis.FileSystemFileHandle &&\n  !globalThis.FileSystemFileHandle.prototype.createWritable &&\n  !globalThis.FileSystemWritableFileStream\n) {\n  globalThis.FileSystemWritableFileStream = FileSystemWritableFileStream\n}\n\nexport default FileSystemWritableFileStream\nexport { FileSystemWritableFileStream }\n","const kAdapter = Symbol('adapter')\n\n/**\n * @typedef {Object} FileSystemHandlePermissionDescriptor\n * @property {('read'|'readwrite')} [mode='read']\n */\nclass FileSystemHandle {\n  /** @type {FileSystemHandle} */\n  [kAdapter]\n\n  /** @type {string} */\n  name\n  /** @type {('file'|'directory')} */\n  kind\n\n  /** @param {FileSystemHandle & {writable}} adapter */\n  constructor (adapter) {\n    this.kind = adapter.kind\n    this.name = adapter.name\n    this[kAdapter] = adapter\n  }\n\n  /** @param {FileSystemHandlePermissionDescriptor} descriptor */\n  async queryPermission (descriptor = {}) {\n    const { mode = 'read' } = descriptor\n    const handle = this[kAdapter]\n\n    if (handle.queryPermission) {\n      return handle.queryPermission({mode})\n    }\n\n    if (mode === 'read') {\n      return 'granted'\n    } else if (mode === 'readwrite') {\n      return handle.writable ? 'granted' : 'denied'\n    } else {\n      throw new TypeError(`Mode ${mode} must be 'read' or 'readwrite'`)\n    }\n  }\n\n  async requestPermission ({mode = 'read'} = {}) {\n    const handle = this[kAdapter]\n    if (handle.requestPermission) {\n      return handle.requestPermission({mode})\n    }\n\n    if (mode === 'read') {\n      return 'granted'\n    } else if (mode === 'readwrite') {\n      return handle.writable ? 'granted' : 'denied'\n    } else {\n      throw new TypeError(`Mode ${mode} must be 'read' or 'readwrite'`)\n    }\n  }\n\n  /**\n   * Attempts to remove the entry represented by handle from the underlying file system.\n   *\n   * @param {object} options\n   * @param {boolean} [options.recursive=false]\n   */\n  async remove (options = {}) {\n    await this[kAdapter].remove(options)\n  }\n\n  /**\n   * @param {FileSystemHandle} other\n   */\n  async isSameEntry (other) {\n    if (this === other) return true\n    if (\n      (!other) ||\n      (typeof other !== 'object') ||\n      (this.kind !== other.kind) ||\n      (!other[kAdapter])\n    ) return false\n    return this[kAdapter].isSameEntry(other[kAdapter])\n  }\n}\n\nObject.defineProperty(FileSystemHandle.prototype, Symbol.toStringTag, {\n  value: 'FileSystemHandle',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\n// Safari safari doesn't support writable streams yet.\nif (globalThis.FileSystemHandle) {\n  globalThis.FileSystemHandle.prototype.queryPermission ??= function (descriptor) {\n    return 'granted'\n  }\n}\n\nexport default FileSystemHandle\nexport { FileSystemHandle }\n","export const errors = {\n  INVALID: ['seeking position failed.', 'InvalidStateError'],\n  GONE: ['A requested file or directory could not be found at the time an operation was processed.', 'NotFoundError'],\n  MISMATCH: ['The path supplied exists, but was not an entry of requested type.', 'TypeMismatchError'],\n  MOD_ERR: ['The object can not be modified in this way.', 'InvalidModificationError'],\n  SYNTAX: m => [`Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. ${m}`, 'SyntaxError'],\n  SECURITY: ['It was determined that certain files are unsafe for access within a Web application, or that too many calls are being made on file resources.', 'SecurityError'],\n  DISALLOWED: ['The request is not allowed by the user agent or the platform in the current context.', 'NotAllowedError']\n}\n\nexport const config = {\n  writable: globalThis.WritableStream\n}\n\nexport async function fromDataTransfer (entries) {\n  console.warn('deprecated fromDataTransfer - use `dt.items[0].getAsFileSystemHandle()` instead')\n  const [memory, sandbox, fs] = await Promise.all([\n    import('./adapters/memory.js'),\n    import('./adapters/sandbox.js'),\n    import('./FileSystemDirectoryHandle.js')\n  ])\n\n  const folder = new memory.FolderHandle('', false)\n  folder._entries = entries.map(entry => entry.isFile\n    ? new sandbox.FileHandle(entry, false)\n    : new sandbox.FolderHandle(entry, false)\n  )\n\n  return new fs.FileSystemDirectoryHandle(folder)\n}\n\nexport async function getDirHandlesFromInput (input) {\n  const { FolderHandle, FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemDirectoryHandle } = await import('./FileSystemDirectoryHandle.js')\n\n  const files = Array.from(input.files)\n  const rootName = files[0].webkitRelativePath.split('/', 1)[0]\n  const root = new FolderHandle(rootName, false)\n\n  files.forEach(file => {\n    const path = file.webkitRelativePath.split('/')\n    path.shift()\n    const name = path.pop()\n\n    const dir = path.reduce((dir, path) => {\n      if (!dir._entries[path]) dir._entries[path] = new FolderHandle(path, false)\n      return dir._entries[path]\n    }, root)\n\n    dir._entries[name] = new FileHandle(file.name, file, false)\n  })\n\n  return new FileSystemDirectoryHandle(root)\n}\n\nexport async function getFileHandlesFromInput (input) {\n  const { FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n\n  return Array.from(input.files).map(file =>\n    new FileSystemFileHandle(new FileHandle(file.name, file, false))\n  )\n}\n","import FileSystemHandle from './FileSystemHandle.js'\nimport { errors } from './util.js'\n\nconst { GONE, MOD_ERR } = errors\n\nconst kAdapter = Symbol('adapter')\n\nclass FileSystemDirectoryHandle extends FileSystemHandle {\n  /** @type {FileSystemDirectoryHandle} */\n  [kAdapter]\n\n  constructor (adapter) {\n    super(adapter)\n    this[kAdapter] = adapter\n  }\n\n  /**\n   * @param {string} name Name of the directory\n   * @param {object} [options]\n   * @param {boolean} [options.create] create the directory if don't exist\n   * @returns {Promise<FileSystemDirectoryHandle>}\n   */\n  async getDirectoryHandle (name, options = {}) {\n    if (name === '') {\n      throw new TypeError(`Name can't be an empty string.`)\n    }\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.create = !!options.create\n    const handle = await this[kAdapter].getDirectoryHandle(name, options)\n    return new FileSystemDirectoryHandle(handle)\n  }\n\n  /** @returns {AsyncGenerator<[string, FileSystemHandle | FileSystemDirectoryHandle]>} */\n  async * entries () {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n\n    for await (const [_, entry] of this[kAdapter].entries())\n      yield [entry.name, entry.kind === 'file'\n        ? new FileSystemFileHandle(entry)\n        : new FileSystemDirectoryHandle(entry)]\n  }\n\n  /** @deprecated use .entries() instead */\n  async * getEntries() {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n    console.warn('deprecated, use .entries() instead')\n    for await (let entry of this[kAdapter].entries())\n      yield entry.kind === 'file'\n        ? new FileSystemFileHandle(entry)\n        : new FileSystemDirectoryHandle(entry)\n  }\n\n  /**\n   * @param {string} name Name of the file\n   * @param {object} [options]\n   * @param {boolean} [options.create] create the file if don't exist\n   */\n  async getFileHandle (name, options = {}) {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n    if (name === '') throw new TypeError(`Name can't be an empty string.`)\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.create = !!options.create\n    const handle = await this[kAdapter].getFileHandle(name, options)\n    return new FileSystemFileHandle(handle)\n  }\n\n  /**\n   * @param {string} name\n   * @param {object} [options]\n   * @param {boolean} [options.recursive]\n   */\n  async removeEntry (name, options = {}) {\n    if (name === '') {\n      throw new TypeError(`Name can't be an empty string.`)\n    }\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.recursive = !!options.recursive // cuz node's fs.rm require boolean\n    return this[kAdapter].removeEntry(name, options)\n  }\n\n  async resolve (possibleDescendant) {\n    if (await possibleDescendant.isSameEntry(this)) {\n      return []\n    }\n\n    const openSet = [{ handle: this, path: [] }]\n\n    while (openSet.length) {\n      let { handle: current, path } = openSet.pop()\n\n      for await (const entry of current.values()) {\n        if (await entry.isSameEntry(possibleDescendant)) {\n          return [...path, entry.name]\n        }\n        if (entry.kind === 'directory') {\n          openSet.push({ handle: entry, path: [...path, entry.name] })\n        }\n      }\n    }\n\n    return null\n  }\n\n  async * keys () {\n    for await (const [name] of this[kAdapter].entries())\n      yield name\n  }\n\n  async * values () {\n    for await (const [_, entry] of this)\n      yield entry\n  }\n\n  [Symbol.asyncIterator]() {\n    return this.entries()\n  }\n}\n\nObject.defineProperty(FileSystemDirectoryHandle.prototype, Symbol.toStringTag, {\n\tvalue: 'FileSystemDirectoryHandle',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n})\n\nObject.defineProperties(FileSystemDirectoryHandle.prototype, {\n\tgetDirectoryHandle: { enumerable: true },\n\tentries: { enumerable: true },\n\tgetFileHandle: { enumerable: true },\n\tremoveEntry: { enumerable: true }\n})\n\nif (globalThis.FileSystemDirectoryHandle) {\n  const proto = globalThis.FileSystemDirectoryHandle.prototype\n\n  proto.resolve = async function resolve (possibleDescendant) {\n    if (await possibleDescendant.isSameEntry(this)) {\n      return []\n    }\n\n    const openSet = [{ handle: this, path: [] }]\n\n    while (openSet.length) {\n      let { handle: current, path } = openSet.pop()\n\n      for await (const entry of current.values()) {\n        if (await entry.isSameEntry(possibleDescendant)) {\n          return [...path, entry.name]\n        }\n        if (entry.kind === 'directory') {\n          openSet.push({ handle: entry, path: [...path, entry.name] })\n        }\n      }\n    }\n\n    return null\n  }\n\n  // Safari allows us operate on deleted files,\n  // so we need to check if they still exist.\n  // Hope to remove this one day.\n  async function ensureDoActuallyStillExist (handle) {\n    const root = await navigator.storage.getDirectory()\n    const path = await root.resolve(handle)\n    if (path === null) { throw new DOMException(...GONE) }\n  }\n\n  const entries = proto.entries\n  proto.entries = async function * () {\n    await ensureDoActuallyStillExist(this)\n    yield * entries.call(this)\n  }\n  proto[Symbol.asyncIterator] = async function * () {\n    yield * this.entries()\n  }\n\n  const removeEntry = proto.removeEntry\n  proto.removeEntry = async function (name, options = {}) {\n    return removeEntry.call(this, name, options).catch(async err => {\n      const unknown = err instanceof DOMException && err.name === 'UnknownError'\n      if (unknown && !options.recursive) {\n        const empty = (await entries.call(this).next()).done\n        if (!empty) { throw new DOMException(...MOD_ERR) }\n      }\n      throw err\n    })\n  }\n}\n\nexport default FileSystemDirectoryHandle\nexport { FileSystemDirectoryHandle }\n","import FileSystemHandle from './FileSystemHandle.js'\nimport FileSystemWritableFileStream from './FileSystemWritableFileStream.js'\nimport { errors } from './util.js'\n\nconst { INVALID, SYNTAX, GONE } = errors\n\nconst kAdapter = Symbol('adapter')\n\nclass FileSystemFileHandle extends FileSystemHandle {\n  /** @type {FileSystemFileHandle} */\n  [kAdapter]\n\n  constructor (adapter) {\n    super(adapter)\n    this[kAdapter] = adapter\n  }\n\n  /**\n   * @param  {Object} [options={}]\n   * @param  {boolean} [options.keepExistingData]\n   * @returns {Promise<FileSystemWritableFileStream>}\n   */\n  async createWritable (options = {}) {\n    return new FileSystemWritableFileStream(\n      await this[kAdapter].createWritable(options)\n    )\n  }\n\n  /**\n   * @returns {Promise<File>}\n   */\n  async getFile () {\n    return this[kAdapter].getFile()\n  }\n}\n\nObject.defineProperty(FileSystemFileHandle.prototype, Symbol.toStringTag, {\n  value: 'FileSystemFileHandle',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nObject.defineProperties(FileSystemFileHandle.prototype, {\n  createWritable: { enumerable: true },\n  getFile: { enumerable: true }\n})\n\n// Safari doesn't support async createWritable streams yet.\nif (\n  globalThis.FileSystemFileHandle &&\n  !globalThis.FileSystemFileHandle.prototype.createWritable\n) {\n  const wm = new WeakMap()\n\n  let workerUrl\n\n  // Worker code that should be inlined (can't use any external functions)\n  const code = () => {\n    let fileHandle, handle\n\n    onmessage = async evt => {\n      const port = evt.ports[0]\n      const cmd = evt.data\n      switch (cmd.type) {\n        case 'open':\n          const file = cmd.name\n\n          let dir = await navigator.storage.getDirectory()\n\n          for (const folder of cmd.path) {\n            dir = await dir.getDirectoryHandle(folder)\n          }\n\n          fileHandle = await dir.getFileHandle(file)\n          handle = await fileHandle.createSyncAccessHandle()\n          break\n        case 'write':\n          handle.write(cmd.data, { at: cmd.position })\n          handle.flush()\n          break\n        case 'truncate':\n          handle.truncate(cmd.size)\n          break\n        case 'abort':\n        case 'close':\n          handle.close()\n          break\n      }\n\n      port.postMessage(0)\n    }\n  }\n\n\n  globalThis.FileSystemFileHandle.prototype.createWritable = async function (options) {\n    // Safari only support writing data in a worker with sync access handle.\n    if (!workerUrl) {\n      const stringCode = `(${code.toString()})()`\n      const blob = new Blob([stringCode], {\n        type: 'text/javascript'\n      })\n      workerUrl = URL.createObjectURL(blob)\n    }\n    const worker = new Worker(workerUrl, { type: 'module' })\n\n    let position = 0\n    const textEncoder = new TextEncoder()\n    let size = await this.getFile().then(file => file.size)\n\n    const send = message => new Promise((resolve, reject) => {\n      const mc = new MessageChannel()\n      mc.port1.onmessage = evt => {\n        if (evt.data instanceof Error) reject(evt.data)\n        else resolve(evt.data)\n        mc.port1.close()\n        mc.port2.close()\n        mc.port1.onmessage = null\n      }\n      worker.postMessage(message, [mc.port2])\n    })\n\n    // Safari also don't support transferable file system handles.\n    // So we need to pass the path to the worker. This is a bit hacky and ugly.\n    const root = await navigator.storage.getDirectory()\n    const parent = await wm.get(this)\n    const path = await root.resolve(parent)\n\n    // Should likely never happen, but just in case...\n    if (path === null) throw new DOMException(...GONE)\n\n    let controller\n    await send({ type: 'open', path, name: this.name })\n\n    if (options?.keepExistingData === false) {\n      await send({ type: 'truncate', size: 0 })\n      size = 0\n    }\n\n    const ws = new FileSystemWritableFileStream({\n      start: ctrl => {\n        controller = ctrl\n      },\n      async write(chunk) {\n        const isPlainObject = chunk?.constructor === Object\n\n        if (isPlainObject) {\n          chunk = { ...chunk }\n        } else {\n          chunk = { type: 'write', data: chunk, position }\n        }\n\n        if (chunk.type === 'write') {\n          if (!('data' in chunk)) {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('write requires a data argument'))\n          }\n\n          chunk.position ??= position\n\n          if (typeof chunk.data === 'string') {\n            chunk.data = textEncoder.encode(chunk.data)\n          }\n\n          else if (chunk.data instanceof ArrayBuffer) {\n            chunk.data = new Uint8Array(chunk.data)\n          }\n\n          else if (!(chunk.data instanceof Uint8Array) && ArrayBuffer.isView(chunk.data)) {\n            chunk.data = new Uint8Array(chunk.data.buffer, chunk.data.byteOffset, chunk.data.byteLength)\n          }\n\n          else if (!(chunk.data instanceof Uint8Array)) {\n            const ab = await new Response(chunk.data).arrayBuffer()\n            chunk.data = new Uint8Array(ab)\n          }\n\n          if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n            position = chunk.position\n          }\n          position += chunk.data.byteLength\n          size += chunk.data.byteLength\n        } else if (chunk.type === 'seek') {\n          if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n            if (size < chunk.position) {\n              throw new DOMException(...INVALID)\n            }\n            console.log('seeking', chunk)\n            position = chunk.position\n            return // Don't need to enqueue seek...\n          } else {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('seek requires a position argument'))\n          }\n        } else if (chunk.type === 'truncate') {\n          if (Number.isInteger(chunk.size) && chunk.size >= 0) {\n            size = chunk.size\n            if (position > size) { position = size }\n          } else {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('truncate requires a size argument'))\n          }\n        }\n\n        await send(chunk)\n      },\n      async close () {\n        await send({ type: 'close' })\n        worker.terminate()\n      },\n      async abort (reason) {\n        await send({ type: 'abort', reason })\n        worker.terminate()\n      },\n    })\n\n    return ws\n  }\n\n  const orig = FileSystemDirectoryHandle.prototype.getFileHandle\n  FileSystemDirectoryHandle.prototype.getFileHandle = async function (...args) {\n    const handle = await orig.call(this, ...args)\n    wm.set(handle, this)\n    return handle\n  }\n}\n\nexport default FileSystemFileHandle\nexport { FileSystemFileHandle }\n"],"file":"static/js/es6.DwgrEqib.js"}